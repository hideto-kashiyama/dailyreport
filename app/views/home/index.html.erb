<div class="container">
    
<meta charset="UTF-8">   

<div class="up_group"><button class="mic" type="submit" onclick =" recstart()">
 
          <i class="fa fa-microphone fa-3x"><a id="rscap">音声入力開始　  </a></i>
          
</button>

<button id="stcap" onclick="recstop()">音声入力停止</button></div><a id="recap">現在音声入力停止中</a></i></div>

<div><textarea id="result_text" rows="10" cols="60" ></textarea></div>

<div><input type="text" id="hi"></div><br>

<button id="tclear" onclick="txtclear()">テキストクリア</button>

 <button id= "tlink">日報登録画面へ</button><br>
 
 <button id= "blink">過去の日報閲覧</button>
 
 
 
<script>
$(function(){
//今日の日付データを変数hidukeに格納
var hiduke=new Date(); 

//年・月・日・曜日を取得する
var year = hiduke.getFullYear();
var month = hiduke.getMonth()+1;
var week = hiduke.getDay();
var day = hiduke.getDate();

var yobi= new Array("日","月","火","水","木","金","土");

 $('#hi').val(year+"年"+month+"月"+day+"日 "+yobi[week]+"曜日");

});

$(function(){
    
    $('#blink').click(function() {
        
        location.href="/home/master";
    
     });
});

$(function(){
    
    $('#tlink').click(function() {
        
        recstop();//録音停止
        
        var param = $("#result_text").val();
        param = encodeURIComponent(param);
      
          //文字が入ってる時だけ実行
        if (param != ""){
             
            
      
             window.location.href="/home/ctg?param=" + param;
      　　　
      　　
        }else{
            
            
　            alert('テキストがありません');
            
        }　
    
       
    });
});


  var stopflag=1; //録音状態　1: 停止状態　0:録音中状態
　
 //var jeflag=1; //言語切り替えフラグ　1: 日本語　0:英語

 //var gid; //言語判定　1: 日本語　0:英語
 
　 // 録音(音声認識)
　function recstart() { //音声入力開始
　　　　
　      $('#recap').hide();//現在音声入力停止中
　      
　      if (stopflag==1) { //停止状態なら　初期状態
　     　  console.log('初期状態');
　         recognition.start();//startして
　         stopflag=0;//start状態にする
　          
　         
　               
    　         $('#rscap').text("");//音声入力開始を消す
          　   $('#rscap').text("音声認識中..");
              tenmetu('mic');//点滅
    　         $('#rscap').css('color','green'); 
             
　           
　     } else {　//録音中なら
　        console.log('録音中');
　     
         
                   // recognition.stop()
                   
                     $('#rscap').text("");//音声入力開始を消す
                  　 $('#rscap').text("音声認識中..");
                     tenmetu('mic');//点滅
                    $('#rscap').css('color', 'green');
               
    
　     }         
　     
　 }
　 
　  function recstop() {　//音声入力停止
　      
　      recognition.stop()
　      stopflag=1;
　      $('#rscap').text("音声入力開始");
        $('#rscap').css('color', 'black');
        $('.mic').css('background-color', 'white');
        $('#recap').show();
     
　      
　  }
　 
 　window.SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition;
           var recognition = new webkitSpeechRecognition();
           recognition.interimResults = true;
        　 recognition.continuous = true;
           //最大2個の認識仮説を取得する
           //recognition.maxAlternatives = 2;
                

   recognition.onstart = function() {
               
                   recognition.lang='ja-JP';
                   console.log("日本語認識中");
               
             　
            
            };

　　　recognition.onspeechstart= function() {
                 
             
                   recognition.lang='ja-JP';
                   console.log("会話中日本語認識中");
                   
               
             
             };   
                 
        recognition.onend= function() {
                
                if (stopflag==0) { 
                    
                   recognition.start();
                 
                 }
                
            };
            
             var txtf="";
             recognition.onresult = function(event) {
                var results = event.results;
                var lgth=0;
                var txt;
                
                for (var i = event.resultIndex; i < results.length; i++) {
                   
                    if (results[i].isFinal) {
                      if (txtf=="") {
                          
                          txt=results[i][0].transcript;
                          txtf=txt;
                          console.log(txtf);
                          $('#result_text').text(txtf);
                      } else {
                          
                          txt=results[i][0].transcript;
                          txtf=txtf+"。"+"\n"+txt; 
                          
                           console.log(txtf);
                        $('#result_text').text(txtf);
                      }
                      
                       
                    }
                    
                }
              };
            

function txtclear() {　　//テキストクリア
    
     $('#result_text').val("");
     $('#txtTarget').val("");
     $('.translabel').hide();
     
}

function wfin(txt,idv) { //タイプライターのようにテキストを1文字ずつ表示させる関数
     　　　//txt:テキスト　idv 囲む要素のid
     　　　    var txtArr = txt.split("");
            var count = 0;
        
            var txtCount = function() {
                var timer = setTimeout(txtCount, 250);
                $('.'+idv).append(txtArr[count]);
                count++;
                if (count == txtArr.length) {
                    clearTimeout(timer);
                }
            }
        
            txtCount();

    }
    
    //jquery.flicker.jsを使った要素点滅
function tenmetu(v) {　//日本語
    
        $('.'+v).flicker({
            'reps': 2, 
            'pause': 200, 
            'delay': 800,
             'color': '#CCFFCC'   
           
        });
        
         /*'reps': 2, //点滅する回数です。
            'pause': 200, //点滅して色がついている時の時間の長さです'color': '#CCFFCC'   
            'delay': 800, //点滅する間隔です
            'color': '#CCFFCC' //色を設定できます*/
        
}  

//jquery.flicker.js プラグイン
(function( $ ){

	$.fn.flicker = function(options){

		var settings = {
			'reps'		: 10,
			'pause'		: 100,
			'delay'		: 400,
			'color'		: '#f00'
		};

		if ( options ) { 
			$.extend( settings, options );
		}
	
		return this.each( function() {

			$this = $(this);
			
			flashScreen($this, settings.reps, settings.pause, settings.delay, settings.color); 
		});
	};

	flashScreen = function(obj, reps, pause, delay, color) {
		if (reps == 0)
			return false;

		_reps = reps;
		_pause = pause;
		_delay = delay;
		_color = color;
		_this = obj;
			
		background = obj.css('background-color');
		obj.css('background-color', color);
		setTimeout("_this.css('background-color', background);", pause);

		setTimeout('flashScreen(_this, _reps - 1, _pause, _delay, _color);', _delay);
	}	
		
})(jQuery);
　　
    
　　
</script>


